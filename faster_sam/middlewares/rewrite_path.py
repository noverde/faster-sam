from starlette.types import Message
from starlette.middleware.base import BaseHTTPMiddleware, RequestResponseEndpoint
from starlette.requests import Request
from starlette.responses import Response
from starlette.types import ASGIApp
from http import HTTPMethod


class RewritePathMiddleware(BaseHTTPMiddleware):
    """
    Rewrites a specified part of the request path.
    Parameters
    ----------
    app : ASGIApp
        Application instance the middleware is being registered to.
    """

    def __init__(self, app: ASGIApp) -> None:
        """
        Initializes the RewritePathMiddleware.
        """
        super().__init__(app, self.dispatch)

    async def set_body(self, request: Request):
        receive_ = await request._receive()

        async def receive() -> Message:
            return receive_

        request._receive = receive

    async def dispatch(self, request: Request, call_next: RequestResponseEndpoint) -> Response:
        """
        Rewrites a specified part of the request path.
        Parameters
        ----------
        request : Request
            The incoming request.
        call_next : RequestResponseEndpoint
            Next middleware or endpoint on the execution stack
        Returns
        -------
        Response
            The response generated by the middleware.
        """
        if request.method != HTTPMethod.POST:
            return await call_next(request)

        await self.set_body(request)

        body = await request.json()

        queue = body["message"]["attributes"]["endpoint"]

        if "/" in queue:
            queue = queue.rsplit("/")[-1]

        request.scope["path"] = "/" + queue

        return await call_next(request)
