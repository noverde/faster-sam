import json
from http import HTTPStatus
import logging

from starlette.requests import Request
from starlette.responses import Response
from starlette.types import ASGIApp, Receive, Scope, Send

logger = logging.getLogger(__name__)


class BucketPathRewriterMiddleware:
    """
    Rewrites a specified part of the request path with bucket name.

    Parameters
    ----------
    app : ASGIApp
        Application instance the middleware is being registered to.
    """

    def __init__(self, app: ASGIApp) -> None:
        """
        Initializes the BucketPathRewriterMiddleware.
        """
        self.app = app

    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> Response:
        """
        Rewrites a specified part of the request path with bucket name.

        Parameters
        ----------
        request : Request
            The incoming request.
        scope : Scope
            The ASGI scope.
        receive : Receive
            The receive channel.
        send : Send
            The send channel.

        Returns
        -------
        Response
            The response generated by the middleware.
        """
        request = Request(scope, receive)

        if request.method != "POST":
            return await self.app(scope, receive, send)

        body = await request.body()

        try:
            body = json.loads(body)
        except json.JSONDecodeError:
            content = {"message": "Invalid Request"}
            status_code = HTTPStatus.BAD_REQUEST

            return Response(content=json.dumps(content), status_code=status_code.value)

        logger.debug(f"Received body: {body}")

        bucket_name = body["bucket"]

        request.scope["path"] = "/" + bucket_name

        return await self.app(scope, receive, send)
