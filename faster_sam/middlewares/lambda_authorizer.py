import datetime
import json
import logging
from http import HTTPStatus
from typing import Any, Dict, Optional, Callable
from uuid import uuid4

import boto3
from botocore.client import BaseClient
from starlette.middleware.base import BaseHTTPMiddleware, RequestResponseEndpoint
from starlette.requests import Request
from starlette.responses import Response
from starlette.types import ASGIApp
from dataclasses import dataclass

logger = logging.getLogger(__name__)


@dataclass
class Credentials:
    access_key: str = None
    secret_access_key: str = None
    session_token: str = None
    role_arn: str = None
    web_identity_token: str = None
    web_identity_callable: Callable[..., str] = None
    role_session_name: str = None
    region: str = None


class Client:
    def __init__(self, credentials: Credentials) -> None:
        self.credentials = credentials
        self.expiration_time = None
        self.client = self.set_client()

    def assume_role(self) -> Dict[str, any]:
        sts = boto3.client("sts")

        response = sts.assume_role_with_web_identity(
            DurationSeconds=900,
            RoleArn=self.credentials.role_arn,
            RoleSessionName=self.credentials.role_session_name,
            WebIdentityToken=self.credentials.web_identity_callable(),
        )

        self.expiration_time = response["Credentials"]["Expiration"]
        return response["Credentials"]

    def set_client(self) -> BaseClient:
        response = self.assume_role()

        session = boto3.Session(
            aws_access_key_id=response["AccessKeyId"],
            aws_secret_access_key=response["SecretAccessKey"],
            aws_session_token=response["SessionToken"],
        )

        return session.client("lambda", self.credentials.region)

    def expired(self) -> bool:
        return self.expiration_time > datetime.now()


class LambdaAuthorizerMiddleware(BaseHTTPMiddleware):
    """
    Invoke Lambda function at AWS to authorize API requests.

    e.g

    This example apply the middleware to authorize an app.

    >>> app = FastAPI()
    >>> app.add_middleware(LambdaAuthorizer, arn="arn:aws:lambda:region:id:function:name")

    Parameters
    ----------
        app : ASGIApp
            Application instance the middleware is being registered to.
        arn : str
            The amazon resource name for the Lambda will be invoked.
        client: BaseClient
            Client Lambda object
    """

    def __init__(
        self, app: ASGIApp, lambda_function: str, credentials: Optional[Credentials] = None
    ) -> None:
        """
        Initializes the LambdaAuthorizer.
        """
        super().__init__(app, self.dispatch)
        self.lambda_function = lambda_function
        self.credentials = credentials
        self._client = None

    @property
    def client(self) -> Client:
        if self._client is None:
            self._client = Client(self.credentials)

        if self._client.expired():
            self._client = Client(self.credentials)

        return self._client

    async def dispatch(self, request: Request, call_next: RequestResponseEndpoint) -> Response:
        """
        Authorize or deny a request based on Authorization field.

        Parameters
        ----------
        request : Request
            The incoming request.
        call_next : RequestResponseEndpoint
            Next middleware or endpoint on the execution stack

        Returns
        -------
        Response
            The response generated by the middleware.
        """

        payload = self.invoke_lambda(request)

        if payload and payload["policyDocument"]["Statement"][0]["Effect"] == "Allow":
            return await call_next(request)

        content = {"message": "Unauthorized"}
        status_code = HTTPStatus.UNAUTHORIZED

        if payload is None:
            content = {"message": "Something went wrong. Try again"}
            status_code = HTTPStatus.INTERNAL_SERVER_ERROR

        return Response(content=json.dumps(content), status_code=status_code.value)

    def invoke_lambda(self, request: Request) -> Optional[Dict[str, Any]]:
        """
        Invoke a Lambda using arn from AWS.

        Parameters
        ----------
        request : Request
            The incoming request.

        Returns
        -------
        Response
            The response payload generated by AWS Lambda invoked.
        """
        input_payload = self.build_event(request)

        try:
            response = self.client.invoke(
                FunctionName=self.lambda_function,
                Payload=json.dumps(input_payload),
            )
        except Exception as error:
            logger.exception(error)
            return None

        data = response["Payload"].read()

        output_payload = json.loads(data)

        return output_payload

    def build_event(self, request: Request) -> Optional[Dict[str, Any]]:
        path = request.url.path
        event = {
            "type": "REQUEST",
            "methodArn": f"arn:aws:execute-api:::/{request.method}/{request.url.path}",  # noqa
            "resource": path,
            "path": path,
            "httpMethod": request.method,
            "headers": dict(request.headers),
            "queryStringParameters": dict(request.query_params),
            "pathParameters": request.path_params,
            "requestContext": {
                "path": path,
                "stage": request.app.version,
                "requestId": str(uuid4()),
                "identity": {
                    "userAgent": request.headers.get("user-agent"),
                    "sourceIp": getattr(request.client, "host", None),
                },
                "httpMethod": request.method,
                "domainName": "noverde.com",
                "apiId": "xpl3tuf2r0",
                "accountId": "",
            },
        }
        return event
